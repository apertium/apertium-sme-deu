!!!!!!!!!!!!!!!
!! ATTRIBUTE CATEGORIES
!!!!!!!!!!!!!!!

number = (ND sg) sg pl sp du ND ;
gender = (GD m) m f mf nt mfn GD ;
case = (CD nom) nom acc dat gen ill loc com ess CD pr_auf_acc pr_auf_dat pr_an_acc pr_an_dat pr_über_acc pr_über_dat pr_mit_dat pr_für_acc pr_von_dat pr_gegen_acc ;
det_type = def ind dem itg pos qnt ;
tense = pres fut pret pii imp ;
person = p1 p2 p3 ;
npclass = ant org al top geo;
prntype = pers ind qnt itg dem pos rel;
foobar = nn ;
sep = sep ;  !! separable stuff
fs = fs fm ; !! separable stuff
advtype = itg ;
inf = inf actio ;
pcp = pp pprs prfprc ;
finity = (FIN fin) inf actio pp prs pprs prfprc fin ;
conneg = conneg ;
def = ind def ;
adj_type = sint pred attr ;
numtype = ord card digit arab ;
negativity = (NEG aff) neg aff ;
comparison = comp sup ;
poss = px1sg px2sg px3sg px1du px2du px3du px1pl px2pl px3pl px3sp ;
! Giella specifics
sem = (SEM sem_dummy) sem_time sem_plc sem_hum sem_ani sem_dummy ;
depfunc = "@←SPRED" "@←OPRED" "@←N" "@HNOUN" ;
strength = (STR sw) st sw mix ;
derp = der_inchl der_passl der_passs ;
pass = pass ;
inch = inch ;

months = miessemánu guovvamánu golggotmánnu Miessemánnu Guovvamánnu Golggotmánnu ;
qu_adverbs_de = mehr wenig viel sehr ziemlich  ganz  völlig  vollends größtenteils  kaum  beinahe  fast äußerst höchst zusehends ;




!!!!!!!!!!!!!!!
!! OUTPUT PATTERNS
!!!!!!!!!!!!!!!

! single words
n: _.gender.number.case;
np: _.npclass.gender.number.case;
adj: _.gender.number;
vblex_fin: _.sep.fs.tense.person.number;
vblex_inf: _.sep.inf;
vblex_pp: _.sep.pcp;
vbser: _.tense.person.number;
vbmod: _.tense.person.number;
cnjcoo: _;
cnjsub: _;
prn: _.prntype.foobar.person.gender.number.case;
det: _.det_type.person.gender.number.case;
det_pos: _.det_type.gender.number.case;
adv: _.advtype;
post: _;
pr: _;
adj_agr: _.<sint>.comparison.gender.number.case.strength;
adj_pred: _.<sint>.comparison.adj_type;
num_card: _.number;
num_digit: _;
num_ord: _.<ord>;
pcle: _;
guio: _;

! smaller phrases
PROPN: _.case ;
N: _.gender.number.case.sem ;
V: _.number.person ;
C: _;
PRN: _.case.number.person;
DET: _.gender.case.number.person;
ADV: _;
ADP: _;
A: _.comparison.gender.number.case.strength;
NUM: _ ;
NEG: _ ;
S: _ ;
SFRAG: _ ;

! phrases

PP: _ ;
NUMP: _.number.case ;
NP: _.gender.number.case.sem.strength; ! strength = def for adj
DP: _.gender.number.case;
VP: _.negativity ;


!!!!!!!!!!!!!!!
!! TAG-REWRITE RULES
!!!!!!!!!!!!!!!

tense > tense : pret pii, pres pri, fti fut;
! case > case : ill dat, loc dat, com dat, ess nom;
number > number : du pl ;
inf > inf : actio inf ;
pcp > pcp : prfprc pp ;
conneg > person : conneg p3 ;
conneg > number : conneg sg ;

!!!!!!!!!!!!!!!
!! MACROS
!!!!!!!!!!!!!!!

maybe_art: (if (1.number = sg)
                (if (1.def = def)
                    (if (1.case = com) [der@det.def.[1.gender].sg.dat _]
                     elif (1.case = ill) [der@det.def.[1.gender].sg.acc _]
                     elif (1.case = loc) [der@det.def.[1.gender].sg.dat _]
                     elif (1.case = ess) [der@det.def.[1.gender].sg.nom _]
                     else [der@det.def.[1.gender].sg.[1.case] _ ])
                else
                    (if (1.negativity = neg)
                        (if (1.case = com) [kein@det.ind.[1.gender].sg.dat _]
                         elif (1.case = ill) [kein@det.ind.[1.gender].sg.acc _]
                         elif (1.case = loc) [kein@det.ind.[1.gender].sg.dat _]
                         elif (1.case = ess) [kein@det.ind.[1.gender].sg.nom _]
                         else [kein@det.ind.[1.gender].sg.[1.case] _ ])
                    else
                        (if (1.case = com) [ein@det.ind.[1.gender].sg.dat _]
                         elif (1.case = ill) [ein@det.ind.[1.gender].sg.acc _]
                         elif (1.case = loc) [ein@det.ind.[1.gender].sg.dat _]
                         elif (1.case = ess) [ein@det.ind.[1.gender].sg.nom _]
                         else [ein@det.ind.[1.gender].sg.[1.case] _ ])
                    )
                )
            else
                (if (1.def = def) 
                    (if (1.case = com) [der@det.def.mfn.pl.dat _]
                     elif (1.case = ill) [der@det.def.mfn.pl.acc _]
                     elif (1.case = loc) [der@det.def.mfn.pl.dat _]
                     elif (1.case = ess) [der@det.def.mfn.pl.nom _]
                     else [der@det.def.mfn.pl.[1.case] _])
                else 
                    (if (1.negativity = neg)
                        (if (1.case = com) [kein@det.ind.[1.gender].sg.dat _]
                         elif (1.case = ill) [kein@det.ind.[1.gender].sg.acc _]
                         elif (1.case = loc) [kein@det.ind.[1.gender].sg.dat _]
                         elif (1.case = ess) [kein@det.ind.[1.gender].sg.nom _]
                         else [kein@det.ind.[1.gender].sg.[1.case] _ ])
                    else []
                    )
                )
            );
maybe_adp: (if (1.case = loc) [in@pr.dat _]
            elif (1.case = ill) [in@pr.acc _]
            elif (1.case = com) [mit@pr.dat _]
            elif (1.case = ess) [wie@pr.nom _]  !! als?
            elif (1.case = dat) [zu@pr.dat _]
            else []) ;
maybe_possessive: (if (1.poss = px1sg) [mein@det.pos.m.sg.[1.case] _]
                   elif (1.poss = px2sg) [dein@det.pos.m.sg.[1.case] _]
                   elif (1.poss = px3sg) [sein@det.pos.m.sg.[1.case] _]
                   elif (1.poss = px1du) [dein@det.pos.m.sg.[1.case] _]
                   elif (1.poss = px2du) [dein@det.pos.m.sg.[1.case] _]
                   elif (1.poss = px3du) [ihr@det.pos.m.sg.[1.case] _]
                   else []) ;
pro_undrop: (if (1.number = sg)
                (if (1.person = p1) [ich@prn.pers.p1.mf.sg.nom _]
                 elif (1.person = p2) [du@prn.pers.p2.mf.sg.nom _]
                 elif (1.person = p3) []  !! no undrop 3.sg?
                 else [$$expletive _])
             elif (1.number = pl)
                (if (1.person = p1) [wir@prn.pers.p1.mf.pl.nom _]
                 elif (1.person = p2) [ihr@prn.pers.p2.mf.pl.nom _]
                 elif (1.person = p3) [] !! no undrop 3pl? [sie@prn.pers.p3.mf.pl.nom _]
                 else [$$expletive _])
             elif (1.number = du)
                (if (1.person = p1) [wir@prn.pers.p1.mf.pl.nom _ beide@det.ind.mfn.pl.nom _]
                 elif (1.person = p2) [ihr@prn.pers.p2.mf.pl.nom _ beide@det.ind.mfn.pl.nom _]
                 elif (1.person = p3) [sie@prn.pers.p3.mf.pl.nom _ beide@det.ind.mfn.pl.nom _]
                 else [$$expletive _])
             else [$$expletive _]) ;
pro3_undrop: (if (1.number = sg and 1.person = p3) [es@prn.pers.p3.nt.sg.nom _]
              else []) ;
maybe_nicht: (if (1.negativity = neg) [nicht@adv _]
              else []) ; 
measr_time_to_adj: (if (1.lem/tl = Jahr) jährig@adj.sint.[1.gender].sg.nom.sw
                    else [1(n) ig@adj]) ;

!! split pos generation fucntions
adj: (if (1.depfunc = "@←SPRED") 1(adj_pred)[adj_type=pred]
      elif (1.depfunc = "@←OPRED") 1(adj_pred)[adj_type=pred]
      else 1(adj_agr)
     ) ;
vblex_simple: (if (1.finity = inf) 1(vblex_inf)
        elif (1.finity = actio) 1(vblex_inf)[inf=inf]  ! probably not ideal
        elif (1.pcp = pp) 1(vblex_pp)
        elif (1.pcp = prfprc) 1(vblex_pp)  ! probably not ideal
        elif (1.pcp = pprs) 1(vblex_pp)
        else 1(vblex_fin) ) ;
vblex: (if (1.pass = pass)
          [ 1(vblex_simple)[pos_tag=vaux,lem=werden] _ 1(vblex_pp)[pcp=pp] ]
        elif (1.inch = inch)
          [ 1(vblex_simple)[lem=anfangen] _ zu@pr _ 1(vblex_simple)[finity=inf,inf=inf] ]
        else 1(vblex_simple)) ;
num: (if (1.numtype = arab) 1(num_digit)
      elif (1.numtype = ord) 1(num_ord)
      else 1(num_card) ) ;

!!!!!!!!!!!!!!!
!! REDUCTION RULES
!!!!!!!!!!!!!!!
S -> C PRN.loc leat@vblex NP { 1 _ 2 _ 
            *(maybe_adp)[case=4.case]
            *(maybe_art)[number=4.number,case=4.case,gender=4.gender,def=ind,negativity=3.negativity]
            4 _ 
            haben@vbhaver.pri.[2.person].[2.number] } |
!    ADV VP NP { 2 _ 1 _
!        *(maybe_adp)[case=3.case]
!        *(maybe_art)[number=3.number,case=3.case,gender=3.gender,def=ind,negativity=2.negativity]
!        3 } |
     %VP NP { 1 _
        *(maybe_adp)[case=2.case]
        *(maybe_art)[number=2.number,case=2.case,gender=2.gender,def=ind,negativity=1.negativity]
        %2[strength=mix] } |
     VP DP { 1 _ 
        *(maybe_adp)[case=2.case]
        *(maybe_nicht)[negativity=1.negativity]
        2 } |
     VP { 1 _ *(maybe_nicht)[negativity=1.negativity] } |  ! stray VP
     NP {
        *(maybe_adp)[case=1.case]
        *(maybe_art)[number=1.number,case=1.case,gender=1.gender,def=def,negativity=aff]
        1 } |
     DP { ! determined phrase (no more articles)
        *(maybe_adp)[case=1.case]
        1 } |
     PROPN { ! stray PROPN (no article)
        *(maybe_adp)[case=1.case]
        1 } |
    SFRAG { 1 } |
    SFRAG S { 1 _ 2 } |
    S SFRAG { 1 _ 2 }
    ; 

SFRAG -> N {
    *(maybe_adp)[case=1.case]
    *(maybe_art)[number=1.number,case=1.case,gender=1.gender,def=def,negativity=aff]
    1 } |
    NUMP { 
        *(maybe_adp)[case=1.case]
        1
    } |
    ADV { 1 } ;

NEG -> ii@vblex { nicht@adv[lemcase=1.lemcase] } ; ! stray NEG

verb_ill_to_an = "sich gewöhnen" ;

VP -> NP.*.loc.sem_hum leat@vblex {
        *(maybe_adp)[case=nom]
        *(maybe_art)[number=1.number, case=nom, gender=1.gender,def=def,negativity=aff] 
        1[case=nom] _ haben@vbhaver.pri.p3.[1.number] } |
      leat@vblex go@pcle PRN.*.loc {
        haben@vbhaver.pri.[3.person].[3.number] _
        3[case=nom] } |
      %PROPN.*.loc leat@vblex {
        *(maybe_adp)[case=nom]
        %1[case=nom] _ haben@vbhaver.pri.p3.sg } |
      PRN.*.loc leat@vblex {
        *(maybe_adp)[case=nom]
        1[case=nom] _ haben@vbhaver.pri.[1.person].[1.number] } |
      PRN.*.loc ADV leat@vblex {
        2 _ 
        *(maybe_adp)[case=nom]
        1[case=nom] _ haben@vbhaver.pri.[1.person].[1.number] } |
      DET.*.loc leat@vblex {
        *(maybe_adp)[case=nom]
        1[case=nom] _ haben@vbhaver.pri.[1.person].[1.number] } |
      ii@vblex DP.*.loc leat@vblex {
        nicht@adv _
        *(maybe_adp)[case=nom]
        2[case=nom] _ haben@vbhaver.pri.[1.person].[2.number] } |
      DP.*.loc leat@vblex {
        *(maybe_adp)[case=nom]
        1[case=nom] _ haben@vbhaver.pri.[1.person].[1.number] } |
      NP V {
        *(maybe_adp)[case=1.case]
        *(maybe_art)[number=1.number, case=1.case, gender=1.gender,def=def,negativity=aff]
        1[strength=sw] _ 2 } |
      NUMP V {
        *(maybe_adp)[case=1.case]
        1 _ 2 } |
      PRN V.$lem/tl {
        *(maybe_adp)[case=1.case]
        1 _ 2 } |
      PRN ADV V {
        *(maybe_adp)[case=1.case]
        1 _ 3 _ 2 } |
      PROPN V {
        *(maybe_adp)[case=1.case]
        1 _ 2 } |
      DP V {
        *(maybe_adp)[case=1.case]
        1 _ 2 } |
	  PRN ii@vblex vblex vblex.*.inf { 1 _ 3[person=2.person,number=2.number] _ nicht@adv _ 4 }|
      PRN ii@vblex vblex vel@adv [$negativity=aff] { 1 _
        3[person=2.person,number=2.number] _ 4 } |
      PRN ii@vblex vblex [$negativity=aff] { 1 _
        3[person=2.person,number=2.number] _ nicht@adv } |
      ii@vblex vblex [$negativity=neg] {
        *(pro_undrop)[number=1.number,person=1.person]
        *(pro3_undrop)[number=1.number,person=1.person]
        2[person=1.person, number=1.number] } |
      10: ii@vblex mihkke@prn.*.foc_neg-ge [$negativity=neg] { nichts@adv } |
      ii@vblex mihkke@prn.*.foc_neg-ge vblex [$negativity=neg] {
            nichts@adv _ 3[person=1.person,number=1.number,tense=pri]
                    } |
      ii@vblex prn vblex [$negativity=neg] {
        2 _ 3[person=1.person, number=1.number] } |
      leat@vblex  NP { es@prn.pers.p3.nt.sg.nom _ geben@vblex.[1.tense].p3.sg _
                       2 } | ! existential clause
      V go@pcle {
      1 _ *(pro_undrop)[number=1.number,person=1.person] } |  ! stray V + qst
      V { *(pro_undrop)[number=1.number,person=1.person] 1 } |  ! stray V
      2: %VP NP.*.ill { 1 _ 2[case=(if (1.lem in_cl verb_ill_to_an) pr_an_acc else 2.case)] } |
      ADV V { 1 _ 2 } ;
V -> %vblex.*.der_passl.* {1 _ werden@vaux.prs.[1.person].[1.number] } |
	 %vblex.*.inf.*.@←ADVL.* {zu@ito _ 1} |
     %vblex.*.p3.sg.sentinit { es@prn.pers.p3.nt.sg.nom[lemcase=1.lemcase] _ 1[lemcase=aa] } |
     %vblex [$$expletive=(if (1.lem = "regnen") es@prn.pers.p3.nt.sg.nom
                          elif (1.lem = "Leat") es@prn.pers.p3.nt.sg.nom),
             $person = (if (1.tense = imp) ""
                         elif (1.lem = "regnen") ""
                         else 1.person)]
            {1[person = (if (1.tense = imp) "" else 1.person),
               number = (if (1.number = du) pl else 1.number)] } |
     %vbser {1} |
     %vbmod {1} ;
             
verb_loc_to_auf = aufpassen ; 
verb_ill_to_zu = lasihit ;
verb_loc_to_an = teilnehmen ;
verb_com_to_mit = sprechen zusammenarbeiten ;
VP -> 2: %VP NP.*.loc { %1 _ 2[case=(if (1.lem in_caseless verb_loc_to_auf) pr_auf_acc
								  elif (1.lem in_caseless verb_loc_to_an) pr_an_dat
                                  else 2.case)]} ;
                                  
VP -> 2: %VP NP.*.ill { %1 _ 2[case=(if (1.lem in_caseless verb_ill_to_zu) pr_zu_acc                               
                                  else 2.case)]} ;
                                  
NP -> 2: %N (if ($case = pr_auf_acc) { auf@pr.acc _ 1(maybe_art)[def=def,case=acc] %1[case=acc] }
             ! assume that we came from a PP and should thus be definite
             if ($case = pr_an_acc) { an@pr.acc _ 1(maybe_art)[def=def,case=acc] %1[case=acc] }
             if ($case = pr_über_acc) { über@pr.acc _ 1(maybe_art)[def=def,case=acc] %1[case=acc] }
             if ($case = pr_mit_dat) { mit@pr.dat _ 1(maybe_art)[def=def,case=dat] %1[case=dat] }
             if ($case = pr_für_acc) { für@pr.acc _ 1(maybe_art)[def=def,case=acc] %1[case=acc] }
             if ($case = pr_an_dat) { an@pr.dat _ 1(maybe_art)[def=def,case=dat] %1[case=dat] }
             if ($case = pr_von_dat) { von@pr.dat _ 1(maybe_art)[def=def,case=dat] %1[case=dat] }
             if ($case = pr_gegen_acc) { gegen@pr.acc _ 1(maybe_art)[def=def,case=acc] %1[case=acc] }
             else { %1 }) ;

    
PP -> NUMP post { 2 _ 1 } |
      ! idioms
      prn.pers.*.gen.* mielas@post { 1 _ Meinung@n.f.sg.nom _ nach@pr.dat } |
      PRN post { 2 _ 1 } |
      NP post { 2 _ 1 } |
      NP maŋŋá@pr { 2 _ 1 } |
      * "-"@guio NP maŋŋá@pr { 4 _ 1 2 3 } ;
NUMP -> ! if number is one: use indefinite article instead and singulars:
        ! expressions
        %num.sg.nom n.*.gen num.sg.loc n.*.loc {
            1 _ 2[number=pl,case=nom] _ von@pr.dat _ 3 _ 4[number=pl,case=dat] 
        } |
        %num.sg.nom n.*.nom num.sg.loc n.*.loc {
            1 _ 2[number=sg,case=nom] _ von@pr.dat _ 3 _ 4[number=pl,case=dat] 
        } |
        ! counted stuff
        %num.arab proseanta@n { 1(num_digit) _ 2[number=sg,case=nom] } |
        %num proseanta@n { 1 _ 2[number=sg,case=nom] } |
        %num A n ?(1.lem/sl = "okta") { 
            eine@det.ind.[3.gender].[3.number].[3.case] _
                 %2[number=sg,case=1.case] _
                 %3[number=sg,case=1.case] } |
        %num A n { 1[number=pl,gender=3.gender] _
                 %2[number=pl,case=1.case] _
                 %3[number=pl,case=1.case] } |
        %num n ?(1.lem/sl = "okta") { 
            eine@det.ind.[2.gender].[2.number].[2.case] _
            %2[number=sg,case=1.case] } | 
        %num n { 1[number=pl,gender=2.gender] _
                 %2[number=pl,
                   case=(if (2.case = loc) dat else nom)] } |
        num.arab n num.arab n.*.loc 
        [$number=(if (1.lem/sl incl one_lem) sg else pl),
         $case=(if ((1.lem/sl not incl one_lem) and (1.case = nom)) nom
                else 2.case)]
        { 1(num_digit) _ %2 _ von@pr _ 3(num_digit) _
            4[case=dat,number=(if (3.lem/sl incl one_lem) sg else pl)] 
        } ;
NP -> A %N ADV { %1[gender=2.gender,
                   number=2.number,case=2.case] _ %2 _ 3 } |
      A %N { %1[gender=2.gender,
                 number=2.number,case=2.case] _ %2 } |
      1: vblex.*."@→N" N { 1 _ 2 } |
      1: vblex.*."@→N" NP { 1 _ 2 } |
      %N ADV { %1 _ 2 } |
      N.*.gen %N { %2 _ der@det.def.[1.gender].sg.gen _ 1 } |
      PROPN.*.gen %N { %2 _ der@det.def.[1.gender].sg.gen _ 1 } |
      N.*.gen A N { 2[strength=sw] _ %3 _
                    der@det.def.[1.gender].sg.gen _ 1 } |
      num.*.gen n.*.sem_measr_time.*.gen %n {
            1[number=(if (1.lem/sl incl one_lem) sg else pl)]
            2(measr_time_to_adj)[gender=3.gender] _ 
            %3[case=acc]
        } |
      ! idiomatic 1:n translations
      sápmi@n.*.gen %N { saamisch@adj.[2.gender].[2.number].[2.case].sw _
                         2 } |
      ! n
      %N { %1 } ;
DP -> DET %N { 1[gender=(if (2.number = pl) mfn else 2.gender),
                 number=2.number,
                 case=(if (2.case = loc) nom else 2.case)] _ 2 } |
      DET NP { 1[gender=(if (2.number = pl) mfn else 2.gender),
                 number=2.number,
                 case=(if (2.case = loc) nom else 2.case)]_ 2 } |
      DET A %NP { 1[gender=(if (3.number = pl) mfn else 3.gender),
                 number=3.number,
                 case=(if (3.case = loc) nom else 3.case)] _ 2 _ 3} |
      DP A %NP { 1[gender=(if (3.number = pl) mfn else 3.gender),
                 number=3.number,
                 case=(if (3.case = loc) nom else 3.case)] _ 2 _ 3} |
      adv NP ?(1.lem/tl incl qu_adverbs_de) { 1 _ 2[strength=mix] } |
      adv adj n ?(1.lem/tl incl qu_adverbs_de) { 1 _ 2[strength=mix] _ 3 }|
      adv n ?(1.lem/tl incl qu_adverbs_de) { 1 _ 2 } |
      n.*.[poss].* { 
        *(maybe_possessive)[poss=1.poss,case=1.case]
        1 } |
      ! idiomatic 1:n translations
      ollu@adj %N { viel@adj.sint.attr _ 2 } | 
      veahkki@n { zu@pr.dat _ Hilfe@n.f.sg.dat } |
      ruhta@n { 1 } |
      ! det
      %DET { %1 } ;
N ->
    ! idioms
    ruhtadilli@n { finanziell@adj.sint.f.sg.nom.sw _ Situation@n.f.sg.nom } |
    ! dynamix compounding
    n.*.cmp %n { 1 2 } |
    ! normal n
    %n {1[case=(if (1.case = loc) acc
                                         elif (1.case = ill) dat
                                         elif (1.case = ess) nom
                                         elif (1.case = com) dat
                                         elif (1.case = acc) acc
                                         elif (1.case = dat) dat
                                         elif (1.case = gen) 
                                            (if (1.sem = sem_time) acc
                                            else gen)
                                         else nom),
                                   number=(if (1.number = du) pl
                                           elif (1.number = pl) pl
                                           else sg)] } ;
PROPN -> %np.* {%1} ;
C -> cnjcoo {1} |
     cnjsub {1} ;
DET -> %prn.pers.*.gen."@→N" { %1(det_pos) } |  ! Obs: list from sme-nob
       %prn.pers.*.gen."@→A" { %1(det_pos) } |
       %prn.pers.*.gen.*."@→N" { %1(det_pos) } |
       %prn.pers.*.gen.*."@→A" { %1(det_pos) } |
       %prn.ref.gen.*."@→N" { %1 } |
       %prn.ref.gen.*."@→A" { %1 } |
       %prn.ref.gen."@→N" { %1 } |
       %prn.ref.gen."@→A" { %1 } |
       %prn.dem.*."@→N" { %1 } |
       %prn.dem.*."@→A" { %1 } |
       %prn.ind.*."@→N" { %1 } |
       %prn.ind.*."@→A" { %1 } |
       %prn.itg.*."@→N" { %1 } |
       %prn.itg.*."@→A" { %1 } |
       %prn.ind."@→N" { %1 } |
       %prn.ind."@→A" { %1 } |
       %det { %1 } ;
PRN -> %prn.dem.sg.com ?(1.lem/sl = "dat") { damit@preadv } |
        %prn {  ! prn.itg.m.sg.dat 
            1[case=(if (1.case = loc) nom  
                     elif (1.case = ill) dat
                     elif (1.case = ess) nom
                     elif (1.case = com) dat
                     elif (1.case = acc) acc
                     elif (1.case = dat) dat
                     elif (1.case = gen) gen
                     else nom),
               gender=(if ((1.number = pl) and (1.prntype not = pers)) mfn
                       else 1.gender)] } ;
ADV -> adv {1} |
       ! idiomatics
       dáidit@vblex { vielleicht@adv } |
       davvin@adv { in@pr.dat Nord@n.m.pl.dat } |
       lulde@adv { in@pr.dat Süd@n.m.pl.dat } |
       dát@prn.dem oktavhuohta@n { in@pr.dat _ 
                                   dies@det.pos.m.sg.dat _
                                   Zusammenhang@n.m.sg.dat } |
       dát@prn.dem lassi@n.ess { zusätzlich@adj.sint.attr } |
       dološ@adj rájes@post { seit@pr.dat Urzeit@n.f.pl.dat } |
       1: johtu@n.sem_process.sg.loc { in@pr.dat _ Betrieb@n.m.sg.nom } |
       ! date formats:
       ! month's ordinal. "day" year -> "am" ordinal month year
       [months]@n.sem_time.sg.gen adj.arab.ord
       beaivi@n.sem_time.sg.gen num.sem_year { an@pr.dat _ der@det.def.m.sg.dat _
            2 _ 1 _ 4 } |
       ! month's ordinal. "d." year -> "am" ordinal month year
       [months]@n.sem_time.sg.gen adj.arab.ord
       b@adv.sem_time.abbr num.sem_year { an@pr.dat _ der@det.def.m.sg.dat _
            2 _ 1 _ 4 } |
       ! month's ordinal. "day" -> ordinal month
       [months]@n.sem_time.sg.gen adj.arab.ord
       beaivi@n.sem_time.sg.gen { an@pr.dat _ der@det.def.nt.sg.dat _ 2(num_ord) _ 1[case=nom] } |
       ! month's ordinal. "d." -> "am" ordinal month
       [months]@n.sem_time.sg.gen adj.arab.ord
       b@adv.sem_time.abbr { an@pr.dat _ der@det.def.nt.sg.dat _ 2(num_ord) _ 1[case=nom]  } |
       ! pcles handled as ADV in phrases
       pcle {1} ;
ADP -> post {1} |
       pr {1} ;
NUM -> num.arab { 1(num_digit) } |
       num {1[number = (if (1.lem/sl = "okta") sg else pl)] } |
       adj.arab.ord.* { 1(num_ord) } ;
A -> %buorre@adj { %1[case=(if (1.case = loc) nom
                     elif (1.case = ill) dat
                     elif (1.case = ess) nom
                     elif (1.case = com) acc
                     elif (1.case = acc) acc
                     elif (1.case = dat) dat
                     elif (1.case = gen) gen
                     else nom)] } |
    %adj.<attr> { %1[strength=sw] } |
    %adj ?(case not = "") { %1(adj_pred) } ;

    ! IE numerals have no morphological num so they assume semantic num

! Resources:
! https://wiki.apertium.org/wiki/Apertium-recursive
! https://wiki.apertium.org/wiki/Apertium-recursive/Formalism
! https://wiki.apertium.org/wiki/Apertium-recursive/Cookbook
